{"version":3,"sources":["Components/Filter.js","Components/RestaurantSummary.js","Components/ListRestaurants.js","Components/Navbar.js","Components/Map.js","Components/Search.js","Utils/api.js","App.js","serviceWorker.js","index.js"],"names":["FilterRestaurants","className","htmlFor","type","placeholder","id","RestaurantSummary","props","restaurant","src","icon","alt","name","rating","vicinity","types","map","ListRestaurants","data","results","key","onClick","console","log","handleClick","Navbar","positions","lat","lng","CustomSkinMap","withScriptjs","withGoogleMap","defaultZoom","defaultCenter","defaultOptions","scrollwheel","zoomControl","styles","featureType","stylers","saturation","lightness","hue","elementType","color","visibility","position","Map","googleMapURL","loadingElement","style","height","containerElement","mapElement","SearcRestaurants","API","resource","this","baseUrl","baseInstance","axios","create","baseURL","headers","get","response","error","message","post","App","getReviews","api","fetchData","reviews","isMarkerShown","Search","Filter","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6ec263e1.chunk.js","sourcesContent":["import React from 'react'\n\nconst FilterRestaurants = () => {\n  return (\n    <div className='filter'>\n      <h4 className='sub-header'>Filter by reviews</h4>\n      <div className='filter-body'>\n        <div>\n          <label htmlFor='id'>Min</label>\n          <input className='filters' type='text' placeholder='Min' id='min' />\n        </div>\n        <div>\n          <label htmlFor='id'>Max</label>\n          <input className='filters' type='text' placeholder='Max' id='max' />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default FilterRestaurants\n","import React from 'react'\n\nconst RestaurantSummary = (props) => {\n  const { restaurant } = props\n  return (\n      <article className='list-item'>\n        <div className='list-item-info'>\n          <div>\n            <img src={restaurant.icon} alt='icon' />\n          </div>\n          <div>\n            <h3 className='header'>{restaurant.name} <span className='ratings'>{restaurant.rating}</span> </h3>\n            <p className='sub-header'>{restaurant.vicinity}</p>\n          </div>\n        </div>\n        <div className='types'>\n          {\n            restaurant.types.map(type => {\n              return <p className='tag'>{type}</p>\n            })\n          }\n        </div>\n        <div className='list-item-action'>\n          <div>\n            <button>Leave a Review</button>\n          </div>\n        </div>\n      </article>\n  )\n}\n\nexport default RestaurantSummary\n\n/**\n*/\n","import React from 'react'\n\nimport RestaurantSummary from './RestaurantSummary'\n\nimport data from './data'\n\nconst handleClick = (restaurant) => {\n  console.log('clicked on restaurant!')\n  console.log(restaurant)\n}\n\nconst ListRestaurants = () => {\n  return (\n    <section className='list'>\n      <div>\n        {\n          data.results.map(restaurant => <RestaurantSummary\n            key={restaurant.id}\n            restaurant={{ ...restaurant }}\n            onClick={() => handleClick(restaurant)}\n          />)\n        }\n      </div>\n    </section>\n  )\n}\n\nexport default ListRestaurants\n","import React from 'react'\n\nconst Navbar = () => {\n  return (\n    <header className='navbar'>\n      <h3>La Revue</h3>\n    </header>\n  )\n}\n\nexport default Navbar\n","import React from 'react'\nimport {\n  withScriptjs,\n  withGoogleMap,\n  GoogleMap,\n  Marker\n} from 'react-google-maps'\n\n// default center should be dynamic\nconst positions = [\n  { lat: 0.32358400000000004, lng: 32.5935104 },\n  { lat: 0.3207221, lng: 32.5901075 },\n  {\n    lat: 0.3181999,\n    lng: 32.5940854\n  },\n  {\n    lat: 0.318562,\n    lng: 32.593164\n  }\n]\n\nconst CustomSkinMap = withScriptjs(\n  withGoogleMap(props => (\n    <GoogleMap\n      defaultZoom={13}\n      defaultCenter={{ lat: 0.32358400000000004, lng: 32.5935104 }}\n      defaultOptions={{\n        scrollwheel: false,\n        zoomControl: true,\n        styles: [\n          {\n            featureType: 'water',\n            stylers: [\n              { saturation: 43 },\n              { lightness: -11 },\n              { hue: '#0088ff' }\n            ]\n          },\n          {\n            featureType: 'road',\n            elementType: 'geometry.fill',\n            stylers: [\n              { hue: '#ff0000' },\n              { saturation: -100 },\n              { lightness: 99 }\n            ]\n          },\n          {\n            featureType: 'road',\n            elementType: 'geometry.stroke',\n            stylers: [{ color: '#808080' }, { lightness: 54 }]\n          },\n          {\n            featureType: 'landscape.man_made',\n            elementType: 'geometry.fill',\n            stylers: [{ color: '#ece2d9' }]\n          },\n          {\n            featureType: 'poi.park',\n            elementType: 'geometry.fill',\n            stylers: [{ color: '#ccdca1' }]\n          },\n          {\n            featureType: 'road',\n            elementType: 'labels.text.fill',\n            stylers: [{ color: '#767676' }]\n          },\n          {\n            featureType: 'road',\n            elementType: 'labels.text.stroke',\n            stylers: [{ color: '#ffffff' }]\n          },\n          { featureType: 'poi', stylers: [{ visibility: 'off' }] },\n          {\n            featureType: 'landscape.natural',\n            elementType: 'geometry.fill',\n            stylers: [{ visibility: 'on' }, { color: '#b8cb93' }]\n          },\n          { featureType: 'poi.park', stylers: [{ visibility: 'on' }] },\n          {\n            featureType: 'poi.sports_complex',\n            stylers: [{ visibility: 'on' }]\n          },\n          { featureType: 'poi.medical', stylers: [{ visibility: 'on' }] },\n          {\n            featureType: 'poi.business',\n            stylers: [{ visibility: 'simplified' }]\n          }\n        ]\n      }}\n    >\n      {\n        positions.map(position => {\n          return <Marker position={{ ...position }} />\n        })\n      }\n    </GoogleMap>\n  ))\n)\n\nfunction Map ({ ...props }) {\n  return (\n    <CustomSkinMap\n      googleMapURL='https://maps.googleapis.com/maps/api/js?key=AIzaSyA1PTzMeDzmrxBbsROy9p1pirPxC74pQJc'\n      loadingElement={<div style={{ height: `100%` }} />}\n      containerElement={<div style={{ height: `100vh` }} />}\n      mapElement={<div style={{ height: `100%` }} />}\n    />\n  )\n}\n\nexport default Map\n","import React from 'react'\n\nconst SearcRestaurants = () => {\n  return (\n    <div className='filter'>\n      <h4 className='sub-header'>Search by city</h4>\n      <div className='search-body'>\n        <div>\n          <input type='text' placeholder='E.g Kampala' id='city' className='searchbar'/>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default SearcRestaurants\n","import axios from 'axios'\n\nclass API {\n  constructor (resource) {\n    this.baseUrl = 'http://localhost:5000'\n    this.resource = resource\n\n    // base axios instance\n    this.baseInstance = axios.create({\n      baseURL: this.baseUrl,\n      headers: {\n        // Google API keys\n      }\n    })\n  }\n\n  async fetchData () {\n    try {\n      const response = await this.baseInstance.get(this.resource)\n      return {\n        ...response\n      }\n    } catch (error) {\n      return {\n        error,\n        message: 'Failed to fetch data'\n      }\n    }\n  }\n\n  async postData (data) {\n    try {\n      const response = await this.baseInstance.post(`${this.resource}`, data)\n      return {\n        ...response\n      }\n    } catch (error) {\n      console.log(error)\n      return {\n        error,\n        message: 'Failed to post data'\n      }\n    }\n  }\n}\n\nexport default API\n","import React, { Component } from 'react'\nimport './App.css'\n\n/**\n * components\n */\nimport Filter from './Components/Filter'\nimport ListRestaurants from './Components/ListRestaurants'\nimport Navabar from './Components/Navbar'\nimport Map from './Components/Map'\nimport SearchRestarants from './Components/Search'\n\n/**\n * services\n */\nimport Geolocation from './Services/Geolocation'\n\n/**\n * utils\n */\nimport API from './Utils/api'\n\nclass App extends Component {\n  componentDidMount () {\n    this.getReviews()\n  }\n\n  async getReviews () {\n    try {\n      const api = new API('/reviews')\n      const reviews = await api.fetchData()\n      console.log(reviews)\n    } catch (error) {\n      console.log(error)\n    }\n  }\n  render () {\n    return (\n      <div>\n        <Navabar />\n        <main className='wrapper'>\n          <section className='map'>\n            <Map\n              isMarkerShown\n              googleMapURL='https://maps.googleapis.com/maps/api/js?key=AIzaSyCj2IDnv8a9yaw4XPRSO4JgKYMuyqWhsEs'\n              loadingElement={<div style={{ height: `100%` }} />}\n              containerElement={<div style={{ height: `100%` }} />}\n              mapElement={<div style={{ height: `100%` }} />}\n            />\n          </section>\n          <section className='sidebar'>\n            <SearchRestarants />\n            <Filter />\n            <ListRestaurants />\n          </section>\n        </main>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}